<?php if ( ! defined( 'ABSPATH' ) ) exit; ?>
<?php

/*
 * Add my new menu to the Admin Control Panel
 */
 
// Hook the 'admin_menu' action hook, run the function named 'mfp_Add_My_Admin_Link()'
add_action( 'admin_menu', 'lcjs_Add_My_Admin_Link' );
 
// Add a new top level menu link to the ACP
function lcjs_Add_My_Admin_Link()
{
      add_menu_page(
        'My First Page', // Title of the page
        'LC JS Charts', // Text to show on the menu link
        'manage_options', // Capability requirement to see the link
        'LC-JS/includes/mfp-chart-listing-page.php',
        '',
        'dashicons-chart-pie' // The 'slug' - file to display when clicking the link
    );
    add_submenu_page(
        'LC-JS/includes/mfp-chart-listing-page.php',
        'My subMenu Page', // Title of the page
        'Resources', // Text to show on the menu link
        'manage_options', // Capability requirement to see the link
        'LC-JS/includes/get_help.php' // The 'slug' - file to display when clicking the link
    );
}


add_action('init', 'lcjs_chart_init');
function lcjs_chart_init() {
  $labels = array(
      'name'                  => _x( 'LC-JS Charts', 'Post type general name', 'textdomain' ),
      'singular_name'         => _x( 'LC-JS Charts', 'Post type singular name', 'textdomain' ),
      'menu_name'             => _x( 'LC-JS Charts', 'Admin Menu text', 'textdomain' ),
      'name_admin_bar'        => _x( 'LC-JS Charts', 'Add New on Toolbar', 'textdomain' ),
      'add_new'               => __( 'Add New', 'textdomain' ),
      'add_new_item'          => __( 'Add New Charts', 'textdomain' ),
      'new_item'              => __( 'New Charts', 'textdomain' ),
      'edit_item'             => __( 'Edit Charts', 'textdomain' ),
      'view_item'             => __( 'View Charts', 'textdomain' ),
      'all_items'             => __( 'All Charts', 'textdomain' ),
      'search_items'          => __( 'Search Charts', 'textdomain' ),
      'parent_item_colon'     => __( 'Parent Charts:', 'textdomain' ),
      'not_found'             => __( 'No Charts found.', 'textdomain' ),
      'not_found_in_trash'    => __( 'No Charts found in Trash.', 'textdomain' ),
  );

  $args = array(
      'labels'             => $labels,
      'public'             => true,
      'publicly_queryable' => true,
      'show_ui'            => true,
      'show_in_menu'       => false,
      'query_var'          => true,
      'rewrite'            => array( 'slug' => 'LC_JS_Charts' ),
      'capability_type'    => 'post',
      'has_archive'        => true,
      'hierarchical'       => false,
      'menu_position'      => null,
      'supports'           => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'comments','custom-fields' ),
  );

  register_post_type( 'LC-JS-Charts', $args );
}
global $lccharts_scripts;
 
$lccharts_scripts = array();


function lc_charts_insert_js($js) {
  global $lccharts_scripts;
  if ( !in_array( $js, $lccharts_scripts ) ) {
    $lccharts_scripts[] = $js;
  }
}



add_action( 'admin_footer', 'lc_charts_bottom_js', 1000 );
add_action( 'wp_footer', 'lc_charts_bottom_js', 1000 );

function lc_charts_bottom_js() {
 global $lccharts_scripts;
  if(is_admin() && isset($_GET['page']) && 'LC-JS/includes/mfp-chart-listing-page.php' == $_GET['page']
    || 'LC-JS/includes/License.php' == $_GET['page'] || 'LC-JS/includes/get_help.php' == $_GET['page']) 
    {
    echo '<script  src="'.LC_JS_IIFE_URL.'"></script>';
    echo '<script  src="'.LC_JS_IIFE_URL.'"></script>';
    echo '<script  src="'.plugins_url("js/master-script.js",__FILE__).'"></script>';
    include 'licensekey.php'; 
    if ( sizeof( $lccharts_scripts ) ) { ?>
        <script>
        <?php echo implode( "\n", $lccharts_scripts ); ?>
        </script>
        <?php
        }
    }
}



function lcjs_global_vars() {
  
    $additional =array();
    global $chart_types;
    global $abc;
    $abc = array (
        'dashboard' =>array('Example_1' => array (
            'chart_name' => 'Dashboard Multi-Direction',
            'chart_method' => 'Dashboard',
            'icon' => plugins_url('../images/icons/dashboardMulti.png',__FILE__),
            'html_code' => '<div  id="target_$CHARTID" class="row content"></div>',
            'javascript_code' => '[["name","1","2","1","0","1"],["value","0","1","2","1","1"]]'
        ),         
        'Example_2' => array (
            'chart_name' => 'Dashboard 5 Channels 1000 Pps',
            'chart_method' => 'Dashboard',
            'icon' => plugins_url('../images/icons/dashboard5ch.png',__FILE__),
            'html_code' => ' <div id="target_$CHARTID" class="row content"></div>',
            'javascript_code' => '[["name","Ch 1","Ch 2","Ch 3","Ch 4"],["value","3600","3600","3600","3600"]]'),
       /* 'Example_3' => array (
            'chart_name' => 'Zoom Band Chart',
            'chart_method' => 'Dashboard',
            'icon' => plugins_url('../images/icons/zoomBandChart.png',__FILE__),
            'html_code' => ' <div id="target_$CHARTID" class="row content"></div>',
            'javascript_code' => ""), */   
        ),
        'radial_charts' => array(
        'Example_1' => array (
        'chart_name' => 'Donut',
        'chart_method' => 'Pie',
        'icon' => plugins_url('../images/icons/donutChart.png',__FILE__),
        'html_code' => ' <div id="target_$CHARTID" class="row content"></div>',
        'javascript_code' => '[["Name","US","Canada","Greece","UK","Finland","Denmark"],["Value","15000","20030","8237","16790","9842","4300"]]
        '),
        'Example_2' => array (
            'chart_name' => 'Radar',
            'chart_method' => 'Spider',
            'icon' => plugins_url('../images/icons/spiderAnimated.png',__FILE__),
            'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
            'javascript_code' => '[["Data","Pre-planning","Customer contacts","Meetings","Development time"],["Sydney","6","22","61","76"],["Kuopio","44","8","97","68"]]'),
        'Example_3' => array (
        'chart_name' => 'Pie Chart',
        'chart_method' => 'Pie',
        'icon' => plugins_url('../images/icons/pieChart.png',__FILE__),
        'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
        'javascript_code' => '[["Name","Planning","Development","Testing","Review","Bug fixing","Data 1"],["Value","40","120","60","24","90","100"]]' ),
            ),
        'line_series' => array(
        'Example_1' => array (
        'chart_name' => 'Diesel and Gasoline Price Comparison',
        'chart_method' => 'ChartXY',
        'icon' => plugins_url('../images/icons/lineSeries.png',__FILE__),
        'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
        'javascript_code' => '[["Data","Diesel","","","","","","","","","","","","","","","","","","","","","","","","","","","","",
        "Gasoline","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],
        ["X","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28"],
        ["Y","1.52","1.52","1.52","1.58","2.00","2.00","2.00","2.00","2.26","1.90","1.90","1.90","1.90","1.60","1.60","1.60","1.00","1.00","1.00","1.74","1.47","1.47","1.47","1.74","1.74","1.74","1.5","1.5","1.5","1.35","1.35","1.35","1.35","1.90","1.90","1.90","1.92","1.50","1.50","1.3","1.3","1.3","1.3","1.3","1.32","1.40","1.44","1.02","1.02","1.02","1.02","1.02","1.02","1.02","1.02","1.30","1.30","1.35"]]'
        ),
        'Example_2' => array (
          'chart_name' => 'Simple Line Series',
          'chart_method' => 'ChartXY',
          'icon' => plugins_url('../images/icons/dateTimeAxis.png',__FILE__),
          'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
          'javascript_code' => '[["X","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120"],
          ["Y","0","8","12","18","22","32","40","48","50","54","59","65","70","68","70","69","66","65.4","64","65","63.5","62","61.2","63","61","62","62","60","57.8","58","61","59","63","61","61.8","62","59.9","58","60","63","59.5","62.5","59.7","57","61","59","61","65","62","60","58","59","61","64","65.5","67","68","69","68","69.5","69.9","68.5","67","65","63","60","61.6","62","61","60","63.3","62.7","64.3","63","61.2","60","61","64","61.9","61","58","59","60.5","61","63","64.5","65","66.2","64.9","63","62","63","61.8","62","63","64.2","63","61","59.7","61","58","59","58","58","57.5","59.2","60","61.9","63","64.1","65.9","64","65","62","60","58","57","58.2","58.6","59.3","61"]]'
          ),
        'Example_3' => array (
        'chart_name' => 'Shared Axis',
        'chart_method' => 'ChartXY',
        'icon' => plugins_url('../images/icons/sharedAxis.png',__FILE__),
        'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
        'javascript_code' =>'[["Data","techcomp","","","","","","","","","","","","","","","","","","","",
        "unitek","","","","","","","","","","","","","","","","","","",""],
        ["X","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19"],
        ["Y","352","352","352","358","400","400","400","400","426","390","390","390","390","360","360","360","500","500","500","600","235","235","335","335","490","490","490","492","550","550","600","600","900","900","900","850","1000","1200","1200","1300"]]' ),
        ),
        'trading' =>array(
        'Example_1' => array(
            'chart_name' => 'OHLC Chart',
            'chart_method' => 'ChartXY',
            'icon' => plugins_url('../images/icons/ohlc.png',__FILE__),
            'html_code' =>  '<div id="target_$CHARTID" class="row content"></div>',
            'javascript_code' => '[["X-position","0","10","20","30","40","50","60","70","80","90","100","110","120","130","140","150","160","170","180"],
            ["Opening","208.76","216.42","213.9","205.53","197.99","196.31","195.41","200.2","201.3","199.62","201.02","203.16","203.46","204.28","210.62","210.88","212.99","213.19","209.43"],
            ["Highest","210.16","221.37","218.03","206.43","198.65","198.07","199.56","203.53","202.76","202.05","212.14","206.44","205.14","207.16","212.73","213.35","213.65","214.44","212.05"],
            ["Lowest","207.31","211.3","206.74","201.63","192.58","194.04","193.82","199.39","199.29","199.15","200.48","202.59","199.67","203.84","210.03","210.32","211.6","210.75","201 20"],
            ["Closing","208.78","213.04","208.43","204.02","193.34","197","199.04","203.43","200.99","200.48","208.97","202.75","201.74","206.5","210.35","210.36","212.64","212.46","202.64"]]'),
        'Example_2' => array(
            'chart_name' => 'candleSticks Chart',
            'chart_method' => 'ChartXY',
            'icon' => plugins_url('../images/icons/candleSticks.png',__FILE__),
            'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
            'javascript_code' => '[["X-position","0","10","20","30","40","50","60","70","80"],
            ["Opening","99.96","99.31","96.41","94.47","93.75","96.43","97.86","97.74","98.65"],
            ["Highest","99.99","99.61","96.66","94.85","96.25","97.86","98.17","98.05","98.66"],
            ["Lowest","99.21","96.39","94.51","93.5","93.51","96.32","97.15","97.31","96.78"],
            ["Closing","99.4","96.41","94.8","93.71","96.22","97.84","97.69","97.72","96.98"]]'
            ),
            'Example_3' => array(
                'chart_name' => 'OHLC Series Automatic Packing',
                'chart_method' => 'ChartXY',
                'icon' => plugins_url('../images/icons/ohlcAutomaticPacking.png',__FILE__),
                'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
                'javascript_code' => '[["Data","Data","","","","","","","","","","","","","","","","","","","","","",""],["X","100","150","200","250","300","350","400","450","500","550","600","650","700","750","800","850","900","950","1000","1050","1100","1150","1200"],["Y","150","200","250","300","350","400","450","500","550","600","650","700","750","800","850","900","950","1000","1050","1100","1150","1200","1250"]]'
            ),
        ),
        'statistics' => array(
            'Example_1' => array(
                'chart_name' => 'Point Clusters',
                'chart_method' => 'ChartXY',
                'icon' => plugins_url('../images/icons/pointClusters.png',__FILE__),
                'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
              'javascript_code' => '[["Data","kuopioPoints","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","helsinkiPoints
              "8.101761252446183","6.634050880626223","3.933463796477495","3.111545988258317","2.8180039138943247","2.8180039138943247","2.4657534246575334","2.407045009784736","2.935420743639921","3.6399217221135025","5.107632093933463","6.868884540117416","7.749510763209393","9.217221135029353","10.215264187866929","11.037181996086105","12.035225048923678","12.798434442270057","16.027397260273972","22.544031311154598","24.187866927592953","24.83365949119374","24.65753424657534","24.422700587084147","24.129158512720156","22.4853228962818","21.78082191780822","19.080234833659492","17.31898238747554","16.262230919765166","15.264187866927593","14.324853228962818","11.859099804305282","10.919765166340508","7.749510763209393","6.164383561643835","5.048923679060665","3.5812133072407044","2.8767123287671232","0.3522504892367906","0.3522504892367906","0.23483365949119372","0.410958904109589","0.23483365949119372","0.410958904109589","0.6457925636007827","2.759295499021526","3.7573385518590996","5.98825831702544","9.510763209393346","10.391389432485322","11.037181996086105","11.741682974559687","12.857142857142856","14.383561643835616","15.205479452054796","16.43835616438356","17.96477495107632","19.256360078277883","19.021526418786692","17.201565557729943","15.088062622309199","12.270058708414872","10.626223091976517","8.336594911937379","7.808219178082191","5.283757338551859","4.87279843444227","4.285714285714286","2.172211350293542","3.933463796477495","5.518590998043054","7.749510763209393","10.09784735812133","9.628180039138943","13.209393346379647","12.68101761252446","14.794520547945204","16.203522504892366","18.493150684931507","20.19569471624266","21.42857142857143","22.07436399217221","22.720156555772995","21.722113502935418","19.608610567514678","18.786692759295498","16.731898238747554","14.500978473581215","13.972602739726026","12.38747553816047","14.911937377690801","14.500978473581215","16.027397260273972","15.029354207436398","13.737769080234832","15.322896281800393","17.495107632093934","18.904109589041095","20.900195694716242","22.133072407045006","22.367906066536204","21.78082191780822","20.54794520547945","19.49119373776908","18.258317025440316","17.436399217221137","16.497064579256357","14.383561643835616","13.561643835616438","12.093933463796477","11.037181996086105","10.861056751467709","9.921722113502934","8.336594911937379","6.927592954990215","6.34050880626223","5.518590998043054","2.5244618395303324","4.1682974559686885","3.170254403131115","2.407045009784736","1.8199608610567513","1.467710371819961","1.467710371819961","1.2915851272015655","1.11545988258317","1.3502935420743638","1.4090019569471623","1.9960861056751458","4.10958904109589","5.401174168297455","6.046966731898238","6.75146771037182","8.101761252446183","9.217221135029353","10.09784735812133","6.34050880626223","4.050880626223091","2.8767123287671232","2.1135029354207435","3.2289628180039136","2.8180039138943247","4.931506849315069","5.518590998043054","4.637964774951076","3.874755381604696","2.8180039138943247","2.23091976516634","3.7573385518590996","4.1682974559686885","4.6966731898238745","5.694716242661448","6.986301369863013","7.86692759295499","8.864970645792564","9.217221135029353","9.041095890410958","8.512720156555773","7.984344422700587"
              ,"7.455968688845399","6.457925636007829","5.577299412915851","6.986301369863013","8.63013698630137","10.215264187866929","11.154598825831703","13.033268101761252","13.09197651663405","12.152641878669275","10.919765166340508","10.450097847358121","9.804305283757339","8.806262230919765","8.043052837573384","7.10371819960861","6.105675146771037","5.636007827788649","6.223091976516634","6.34050880626223","6.986301369863013","7.632093933463796","8.160469667318981","9.217221135029353","10.09784735812133","11.037181996086105","11.97651663405088","12.915851272015654","13.385518590998043","14.442270058708415","15.616438356164382","17.201565557729943","18.375733855185906","19.608610567514678","19.608610567514678","21.42857142857143","20.958904109589042","23.01369863013699","19.021526418786692","17.377690802348333","17.553816046966734","16.262230919765166","16.203522504892366","14.853228962818003","13.09197651663405","13.913894324853228","12.622309197651663","11.330724070450097","11.037181996086105","9.628180039138943","9.217221135029353","13.561643835616438","14.20743639921722","18.904109589041095","19.608610567514678","20.900195694716242","21.722113502935418","22.720156555772995","23.95303326810176","23.894324853228966","23.835616438356162","23.835616438356162","23.894324853228966","24.481409001956948","21.487279843444227","21.956947162426612","22.367906066536204","22.89628180039139","20.841487279843445","14.031311154598825","15.557729941291585","12.32876712328767","11.859099804305282","11.330724070450097","6.164383562","6.516634050880624","7.045009784735812","7.279843444227005","7.514677103718199","8.277886497064578","8.63013698630137","10.156555772994128","10.919765166340508","11.800391389432484","12.798434442270057","14.442270058708415","16.555772994129157","17.025440313111545","17.729941291585128","18.610567514677104","18.6692759295499","18.31702544031311","18.082191780821915","19.667318982387478","20.782778864970645","22.07436399217221","23.131115459882583","24.951076320939336","26.301369863013697","26.59491193737769","26.771037181996086","27.76908023483366","28.12133072407045","26.53620352250489","25.655577299412915","15.616438356164382","19.138943248532293","20.782778864970645","23.776908023483365","25.71428571428571","26.301369863013697","26.947162426614483","24.951076320939336","24.83365949119374","25.949119373776906","27.06457925636008","27.886497064579256","28.003913894324853","27.59295499021526","26.066536203522503","24.36399217221135","19.080234833659492","14.442270058708415","10.626223091976517","9.628180039138943","8.454011741682974","9.393346379647749","10.743639921722114","13.033268101761252","8.21917808219178","7.10371819960861","6.2818003913894325","6.223091976516634","6.457925636007829","8.101761252446183","10.567514677103718","11.448140900195694","12.270058708414872","14.031311154598825","15.73385518590998","16.908023483365948","17.61252446183953","13.50293542074364","11.97651663405088","10.332681017612524","8.864970645792564","7.162426614481409","10.450097847358121","13.033268101761252","18.610567514677104","19.608610567514678","20.19569471624266","19.960861056751465","22.015655577299416","23.24853228962818","21.07632093933464","19.726027397260275","18.31702544031311","15.499021526418783","15.264187866927593","14.031311154598825","13.561643835616438","16.908023483365948","18.02348336594912","22.89628180039139","21.78082191780822","20.724070450097848","16.908023483365948","12.915851272015654","11.62426614481409","13.85518590998043","16.08610567514677","17.260273972602743","18.7279843444227","19.021526418786692","18.610567514677104","17.201565557729943","15.675146771037182","15.264187866927593","15.557729941291585","18.140900195694716","18.6692759295499","20.900195694716242","22.309197651663403","23.95303326810176","25.303326810176124","25.655577299412915","25.00978473581213"
              ,"24.77495107632094","23.424657534246577","21.545988258317024","21.135029354207433","20.313111545988257","19.726027397260275","17.96477495107632","17.553816046966734","15.557729941291585","13.620352250489233","13.50293542074364","12.38747553816047","16.731898238747554","19.080234833659492","20.430528375733854","21.898238747553815","22.95499021526419","23.424657534246577","23.718199608610565","24.77495107632094","22.544031311154598","20.078277886497062","22.95499021526419","24.246575342465754","22.661448140900195","21.545988258317024","26.360078277886497","26.53620352250489","25.655577299412915","24.89236790606654","24.070450097847356","25.244618395303327","22.837573385518592","21.135029354207433","19.608610567514678","18.8454011741683","20.665362035225048","21.252446183953033","16.379647749510767","16.84931506849315","14.677103718199607","12.152641878669275","11.682974559686889","10.626223091976517","9.686888454011742","8.63013698630137","11.62426614481409","6.986301369863013","8.63013698630137","9.334637964774949","9.804305283757339","9.393346379647749","9.393346379647749","10.450097847358121","12.093933463796477","13.561643835616438","14.383561643835616","15.264187866927593","17.201565557729943","18.7279843444227","19.78473581213307","19.960861056751465","20.371819960861057","20.900195694716242","22.77886497064579","23.894324853228966","21.956947162426612","18.02348336594912","21.66340508806262","21.36986301369863","22.07436399217221","23.659491193737768","25.479452054794518","26.65362035225049","25.538160469667318","25.244618395303327","27.945205479452053","27.651663405088062","27.651663405088062","27.945205479452053","27.475538160469664","28.356164383561644","28.767123287671232","16.379647749510767","15.499021526418783","14.500978473581215","13.268101761252446","15.968688845401173","15.381604696673193","15.029354207436398","11.682974559686889","10.626223091976517","9.628180039138943","9.686888454011742","11.859099804305282","9.217221135029353","8.277886497064578","11.272015655577299","14.324853228962818","15.616438356164382","16.614481409001957","17.436399217221137","13.79647749510763","16.320939334637963","17.729941291585128","14.442270058708415","12.093933463796477","12.857142857142856","12.563600782778865","12.798434442270057","13.79647749510763","13.033268101761252","10.567514677103718","9.041095890410958","7.749510763209393","8.688845401174168","7.690802348336595","23.01369863013699","29","29","29"],["Y","5335.336538461539","5259.615384615385","5082.932692307692","4923.076923076923","4796.875","4704.326923076923","4620.192307692308","4418.2692307692305","4342.548076923077","4199.5192307692305","4014.423076923077","3930.2884615384614","3745.1923076923076","3408.653846153846","3307.6923076923076","3181.4903846153848","3181.4903846153848","3198.3173076923076","3316.1057692307695","3475.9615384615386","3585.3365384615386","3719.951923076923","3778.846153846154","3820.9134615384614","3896.6346153846152","3963.9423076923076","4325.721153846154","4435.096153846154","4603.365384615385","4754.807692307692","5082.932692307692","5167.067307692308","5562.5","5722.3557692307695","5865.384615384615","5924.278846153846","5966.346153846154","5915.865384615385","5865.384615384615","5579.326923076923","5419.471153846154","5108.173076923077","4460.336538461539","4174.278846153846","4342.548076923077","4056.4903846153848","3551.6826923076924","3282.4519230769233","3046.875","2887.019230769231","2693.5096153846152","2643.028846153846","2643.028846153846","2668.269230769231","2693.5096153846152","2802.8846153846157","3030.048076923077","3274.038461538462","3475.9615384615386","3602.1634615384614","3652.6442307692305","3711.5384615384614","3804.0865384615386","4090.1442307692305","4233.173076923077","4384.615384615385","4435.096153846154","4376.201923076923","4207.932692307692","3862.9807692307695",
              "3770.4326923076924","4485.576923076923","3896.6346153846152","3669.471153846154","4578.125","4981.971153846154","5335.336538461539","5798.076923076923","5688.701923076923","5352.163461538461","5570.913461538461","5772.836538461539","5688.701923076923","5461.538461538461","5183.8942307692305","4998.798076923077","4788.461538461539","4443.509615384615","4123.798076923077","4039.6634615384614","4443.509615384615","4586.538461538461","4822.115384615385","5032.451923076923","5099.759615384615","4754.807692307692","4687.5","4822.115384615385","5125","5394.2307692307695","5436.298076923077","5242.788461538461","5183.8942307692305","4838.942307692308","4603.365384615385","4620.192307692308","4737.9807692307695","4889.423076923077","5116.586538461539","5259.615384615385","5411.057692307692","5478.365384615385","5621.3942307692305","5814.903846153846","5840.1442307692305","5646.634615384615","5411.057692307692","5293.2692307692305","5150.240384615385","5301.682692307692","5217.548076923077","5015.625","4889.423076923077","4679.086538461539","4780.048076923077","4805.288461538461","4527.6442307692305","4334.134615384615","4048.076923076923","3888.221153846154","3711.5384615384614","3484.375","3223.5576923076924","3080.528846153846","3030.048076923077","2929.0865384615386","2903.846153846154","2887.019230769231","2920.673076923077","2929.0865384615386","2996.394230769231","3189.903846153846","3097.3557692307695","3147.8365384615386","3206.7307692307695","2811.298076923077","2929.0865384615386","3055.288461538462","3265.625","3467.548076923077","3518.028846153846","3534.8557692307695","3602.1634615384614","3644.2307692307695","3879.8076923076924","4098.557692307692","4191.1057692307695","4258.413461538461","4350.961538461539","4409.8557692307695","4527.6442307692305","4586.538461538461","5141.826923076923","5074.5192307692305","4965.1442307692305","4838.942307692308","4754.807692307692","4679.086538461539","5343.75","5469.951923076923","5503.6057692307695","5537.259615384615","5427.884615384615","5192.307692307692","4990.384615384615","4695.913461538461","4611.778846153846","4477.163461538461","4359.375","4275.240384615385","4174.278846153846","3921.875","3719.951923076923","3568.5096153846152","3375","3324.519230769231","3425.4807692307695","3518.028846153846","3610.576923076923","3694.7115384615386","3787.2596153846152","3862.9807692307695","3947.1153846153848","4073.3173076923076","4115.384615384615","4123.798076923077","4115.384615384615","4048.076923076923","3947.1153846153848","3879.8076923076924","4182.692307692308","4308.894230769231","4275.240384615385","4426.682692307692","4645.432692307692","4931.490384615385","4990.384615384615","4679.086538461539","4468.75","4628.6057692307695","4805.288461538461","4906.25","4847.3557692307695","4199.5192307692305","3989.1826923076924","3930.2884615384614","4157.451923076923","4199.5192307692305","5823.317307692308","5739.182692307692","5713.942307692308","5865.384615384615","5655.048076923077","5528.846153846154","5394.2307692307695","5326.923076923077","5183.8942307692305","5024.038461538461","4872.596153846154","5394.2307692307695","5562.5","5512.0192307692305","5352.163461538461","5444.711538461539","3862.9807692307695","3854.5673076923076","4174.278846153846","4115.384615384615","3921.875","2314.663462","2351.2019230769233","2479.0865384615386","2543.028846153846","2638.9423076923076","2794.230769230769","2853.605769230769","2972.355769230769","3018.028846153846","3063.7019230769233","3109.375","3155.0480769230767","3228.125","3292.0673076923076","3419.951923076923","3904.086538461538","3753.3653846153848","3616.346153846154","3534.1346153846152","3922.355769230769","3894.951923076923","3858.413461538461","3799.0384615384614","3739.6634615384614","3639.1826923076924","3424.5192307692305","3200.721153846154","2949.5192307692305","2712.0192307692305"
              ,"2638.9423076923076","2437.980769230769","2150.2403846153848","2227.8846153846152","2300.9615384615386","2469.951923076923","2757.6923076923076","2849.0384615384614","2954.086538461538","3050","3324.0384615384614","3547.836538461538","3598.076923076923","3630.0480769230767","3767.0673076923076","3780.7692307692305","3744.230769230769","3853.8461538461534","3218.9903846153848","2944.951923076923","2821.6346153846152","2670.9134615384614","2492.7884615384614","2469.951923076923","2465.3846153846152","2488.221153846154","2323.798076923077","2273.5576923076924","2264.423076923077","2186.778846153846","2168.5096153846152","2145.673076923077","2232.4519230769233","2442.548076923077","2661.778846153846","2967.7884615384614","3282.9326923076924","3438.221153846154","3570.6730769230767","3328.605769230769","3155.0480769230767","2958.653846153846","2826.201923076923","2652.644230769231","2702.8846153846152","2903.846153846154","3342.3076923076924","3575.2403846153848","3652.8846153846152","3739.6634615384614","3693.9903846153848","3333.1730769230767","3191.586538461538","3109.375","3086.5384615384614","3013.461538461538","2684.6153846153848","2529.326923076923","2680.048076923077","2775.961538461538","2830.7692307692305","2817.0673076923076","2437.980769230769","2433.4134615384614","2433.4134615384614","2218.75","2223.3173076923076","2364.903846153846","2278.125","2310.096153846154","2406.0096153846152","2465.3846153846152","2575","2588.701923076923","2451.6826923076924","2424.278846153846","2620.673076923077","2725.721153846154","2739.423076923077","2625.2403846153848","2620.673076923077","2570.4326923076924","2538.4615384615386","2538.4615384615386","2652.644230769231","2890.1442307692305","2986.0576923076924","2903.846153846154","2785.096153846154","2849.0384615384614","2972.355769230769","2958.653846153846","2940.3846153846152","2821.6346153846152","2803.3653846153848","2862.7403846153848","3008.8942307692305","3132.211538461538","3465.625","3511.2980769230767","3561.5384615384614","3602.6442307692305","3648.3173076923076","3675.721153846154","3520.4326923076924","3433.6538461538457","3342.3076923076924","3241.826923076923","3187.0192307692305","3109.375","3063.7019230769233","3118.5096153846152","3301.201923076923","3387.980769230769","3429.086538461538","3502.1634615384614","3643.75","3721.3942307692305","3776.201923076923","3821.875","3643.75","3419.951923076923","3319.471153846154","2986.0576923076924","3031.730769230769","3072.836538461538","2807.9326923076924","2593.269230769231","2561.298076923077","2570.4326923076924","2716.586538461538","2332.9326923076924","2369.471153846154","2383.173076923077","2364.903846153846","2328.3653846153848","2287.2596153846152","2246.153846153846","2214.1826923076924","2182.2115384615386","2191.346153846154","2273.5576923076924","2314.6634615384614","2332.9326923076924","2319.2307692307695","2364.903846153846","2606.971153846154","2611.5384615384614","2712.0192307692305","2739.423076923077","2775.961538461538","2976.9230769230767","3209.855769230769","3310.336538461538","3260.096153846154","3205.2884615384614","3100.2403846153843","3205.2884615384614","3036.2980769230767","2995.1923076923076","2954.086538461538","3159.6153846153848","3081.971153846154","3264.6634615384614",
              "3547.836538461538","3511.2980769230767","3456.4903846153848","3438.221153846154","3442.7884615384614","3374.2788461538457","3269.230769230769","3214.4230769230767","3141.346153846154","3200.721153846154","3104.8076923076924","2922.1153846153848","2894.711538461538","2839.903846153846","2762.2596153846152","2734.855769230769","2912.980769230769","2584.1346153846152","2661.778846153846","2780.528846153846","2762.2596153846152","2712.0192307692305","2675.480769230769","2602.403846153846","2538.4615384615386","2511.0576923076924","2465.3846153846152","2529.326923076923","2597.8365384615386","2419.7115384615386","2342.0673076923076","2296.394230769231","2282.6923076923076","2369.471153846154","2433.4134615384614","2442.548076923077","2648.076923076923","2730.2884615384614","2931.252931","252931.252931"
              ,"252931.252931","252931.252931"]]'),
              'Example_2' => array(
                'chart_name' => 'Simple Funnel Chart',
                'chart_method' => 'Funnel',
                'icon' => plugins_url('../images/icons/simpleFunnel.png',__FILE__),
                'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
                'javascript_code' => '[["Name","Prospects","Contacts","Leads","Customers"],["Value","2000","1540","1095","549"]]'
            ),
            'Example_3' => array(
                'chart_name' => 'Simple Pyramid Chart',
                'chart_method' => 'Pyramid',
                'icon' => plugins_url('../images/icons/simplePyramid.png',__FILE__),
                'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
                'javascript_code' => '[["Name","2015 - 2016","2016 - 2017","2017 - 2018","2018 - 2019"],["Value","3","5","10","17"]]'
            ),
        ),
        'bar_chart' => array(
            'Example_1' => array(
                'chart_name' => 'Bar Chart',
                'chart_method' => 'ChartXY',
                'icon' => plugins_url('../images/icons/groupedBars.png',__FILE__),
                'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
                'javascript_code' => '[["Data","Group A","Group B"],["Finland","48","19"],["Germany","27","40"],["UK","33","33"]]'
                ),
                'Example_2' => array (
                'chart_name' => 'Vertical Bars',
                'chart_method' => 'ChartXY',
                'icon' => plugins_url('../images/icons/verticalBars.png',__FILE__),
                'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
                'javascript_code' => '[["Name","","Q1","","","Q2","","","Q3","","","Q4",""],["Value","20","20","-25","40","28","-23","-40","35","17","24","-29","15"]]'
                ),
                'Example_3' => array (
                    'chart_name' => 'Horizontal Bars',
                    'chart_method' => 'ChartXY',
                    'icon' => plugins_url('../images/icons/horizontalBars.png',__FILE__),
                    'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
                    'javascript_code' => '[["Name","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],["Value","20","-30","-100","100","-75","80","-100","35","-50","100","5","15"]]'
                    ),
                ),         
                'area_series' => array(
                'Example_1' => array(
                    'chart_name' => 'Multiple Areas',
                    'chart_method' => 'ChartXY',                          
                    'icon' => plugins_url('../images/icons/multipleAreas.png',__FILE__),
                    'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
                    'javascript_code' => '[["Data","profitData","","","","","","expensesData","","","","",""],["X","0","10","20","30","40","50","0","10","20","30","40","50"],["Y","0","21","59","62","78","85","0","-58","-61","-62","-66","-88"]]'
                    ),
              'Example_2' => array(
                    'chart_name' => 'Area Range',
                    'chart_method' => 'ChartXY',  
                    'icon' => plugins_url('../images/icons/areaRange.png',__FILE__),
                    'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
                    'javascript_code' => '[["Data","areaRangeData","","","","","","","",""],["X","0","6","13","20","27","34","41","48","55"],["Y","24","11","16","26","-2","-16","-10","3","-1"],["Z","-15","-13","-11","-8","-4","2","9","17","26"]]'),
                    'Example_3' => array(
                    'chart_name' => 'Area Bipolar',
                    'chart_method' => 'ChartXY',
                    'icon' => plugins_url('../images/icons/layeredAreas.png',__FILE__),
                    'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
                    'javascript_code' => '[["Data","areaBipolarData","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],["X","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51"],["Y","12","71","24","39","24","10","58","10","74","23","19","25","51","20","40","50","26","72","39","49","22","21","36","73","67","53","8","7","71","29","56","18","15","9","29","64","44","62","70","19","55","15","48","23","51","51","64","15","31","40","11","30"]]'
                ),
                ),
    'Heatmaps' => array(
              'Example_1' => array(
              'chart_name' => 'Heatmap Grid',
              'icon' => plugins_url('../images/icons/heatmapGrid.png',__FILE__),
              'html_code' => '<div id="target" class="row content"></div>',
              'javascript_code' => "// Extract required parts from LightningChartJS.
                                                    const {
                                                        lightningChart,
                                                        PalettedFill,
                                                        LUT,
                                                        ColorRGBA,
                                                        Themes
                                                    } = lcjs
                                                    
                                                    
                                                    function WaterDropGenerator(
                                                        sizeX,
                                                        sizeZ,
                                                        xPositionsNormalized,
                                                        zPositionsNormalized,
                                                        amplitudes,
                                                        offsetLevel,
                                                        volatility
                                                    ) {
                                                    
                                                        function CalculateWavesAtPoint(
                                                            x,
                                                            z
                                                        ) {
                                                            let resultValue = 0
                                                            const iOscillatorCount = oscillators.length
                                                            for (let i = 0; i < iOscillatorCount; i++) {
                                                                const oscillator = oscillators[i]
                                                                const distX = x - oscillator.centerX
                                                                const distZ = z - oscillator.centerZ
                                                                const dist = Math.sqrt(distX * distX + distZ * distZ)
                                                                resultValue += oscillator.gain * oscillator.amplitude * Math.cos(dist * volatility) * Math.exp(-dist * 3.0)
                                                            }
                                                            return resultValue
                                                        }
                                                    
                                                        const iOscCount = amplitudes.length
                                                        const oscillators = []
                                                    
                                                        for (let iOsc = 0; iOsc < iOscCount; iOsc++) {
                                                            oscillators[iOsc] = {
                                                                amplitude: amplitudes[iOsc],
                                                                centerX: xPositionsNormalized[iOsc],
                                                                centerZ: zPositionsNormalized[iOsc],
                                                                gain: 1,
                                                                offsetY: 0
                                                            }
                                                        }
                                                    
                                                        const result = Array.from(Array(sizeZ)).map(() => Array(sizeX))
                                                        const dTotalX = 1
                                                        const dTotalZ = 1
                                                        const stepX = (dTotalX / sizeX)
                                                        const stepZ = (dTotalZ / sizeZ)
                                                    
                                                        // calculate the data
                                                        for (let row = 0, z = 0; row < sizeZ; row++, z += stepZ) {
                                                            for (let col = 0, x = 0; col < sizeX; col++, x += stepX) {
                                                                result[col][row] = CalculateWavesAtPoint(x, z) + offsetLevel
                                                            }
                                                        }
                                                        return result
                                                    }
                                                    
                                                    // Create a XY Chart.
                                                    const chart = lightningChart(license_key).ChartXY({
                                                        // theme: Themes.dark
                                                        container: 'target'
                                                        
                                                    })
                                                        .setTitle('Heatmap using IntensityGrid')
                                                    
                                                    // Specify the resolution used for the heatmap.
                                                    const sqRes = 200
                                                    const resolutionX = sqRes
                                                    const resolutionY = sqRes
                                                    
                                                    // Generate data to use for heatmap
                                                    const data = WaterDropGenerator(
                                                        resolutionX,     // size of nodes in X
                                                        resolutionY,     // size of nodes in Z
                                                        [0.2, 0.5, 0.7], // Drop X positions in scale 0...1
                                                        [0.6, 0.5, 0.3], // Drop Z positions in scale 0...1
                                                        [15, 50, 3],     // Amplitudes, as Y axis values
                                                        47,              // Offset level (mid-Y)
                                                        25               // Volatility, wave generating density
                                                    )
                                                    // Create LUT and FillStyle
                                                    const palette = new LUT({
                                                        steps: [
                                                            { value: 0, color: ColorRGBA(0, 0, 0) },
                                                            { value: 30, color: ColorRGBA(255, 255, 0) },
                                                            { value: 45, color: ColorRGBA(255, 204, 0) },
                                                            { value: 60, color: ColorRGBA(255, 128, 0) },
                                                            { value: 100, color: ColorRGBA(255, 0, 0) }
                                                        ],
                                                        interpolate: false
                                                    })
                                                    
                                                    // Add a Heatmap to the Chart. By default IntensityGrid Series Type is used.
                                                    const heatmap = chart.addHeatmapSeries({
                                                        rows: resolutionX,
                                                        columns: resolutionX,
                                                        start: { x: 10, y: 10 },
                                                        end: { x: 90, y: 90 },
                                                        pixelate: false
                                                    })
                                                        // Add data and invalidate the Series based on added data.
                                                        .invalidateValuesOnly(data)
                                                        // Use created Paletted FillStyle for the Heatmap.
                                                        .setFillStyle(new PalettedFill({ lut: palette }))
                                                    "
                                                    ),
                        'Example_2' => array(
                                'chart_name' => 'Heatmap Spectrogram',
                                'icon' => plugins_url('../images/icons/heatmapSpectrogram.png',__FILE__),
                                'html_code' => '<div id="target" class="row content"></div>',
                                'javascript_code' => "const {
                                    lightningChart,
                                    IntensitySeriesTypes,
                                    PalettedFill,
                                    LUT,
                                    emptyFill,
                                    emptyLine,
                                    AxisScrollStrategies,
                                    AxisTickStrategies,
                                    ColorHSV,
                                    Themes
                                } = lcjs
                                
                                const AudioContext = window.AudioContext || window.webkitAudioContext
                                // Create a new audio context,
                                // for most part this context is not used for other than creating audiobuffer from audio data
                                const audioCtx = new AudioContext()
                                
                                // General configuration for common settings
                                const config = {
                                    /**
                                     * The resolution of the FFT calculations
                                     * Higher value means higher resolution decibel domain..
                                     */
                                    fftResolution: 4096,
                                    /**
                                     * Smoothing value for FFT calculations
                                     */
                                    smoothingTimeConstant: 0.1,
                                    /**
                                     * The size of processing buffer,
                                     * determines how often FFT is run
                                     */
                                    processorBufferSize: 2048
                                }
                                
                                // Initialize LightningChart JS
                                const lc = lightningChart(license_key)
                                
                                /**
                                 * Fetch audio file and create audio buffer from it.
                                 * @param   {string}         waveformUrl    URL to the WaveForm to load
                                 * @returns {AudioBuffer}                   The audio file as an AudioBuffer
                                 */
                                const loadWaveForm = async (waveformUrl) => {
                                    // Fetch waveform
                                    const resp = await fetch(waveformUrl)
                                    // Convert fetch to array buffer
                                    const waveDataBuffer = await resp.arrayBuffer()
                                    // Convert array buffer to audio buffer
                                    const audioBuffer = await audioCtx.decodeAudioData(waveDataBuffer)
                                    return audioBuffer
                                }
                                
                                /**
                                 * @typedef WaveFormData
                                 * @type {object}
                                 * @property {Uint8Array[]} channels    FFT Data for each channel
                                 * @property {number}       stride      Number of data points in a data block
                                 * @property {number}       rowCount    Number of rows of data
                                 * @property {number}       maxFreq     Maximum frequency of the data
                                 * @property {number}       duration    Audio buffer duration in seconds
                                 */
                                
                                /**
                                 * Process a AudioBuffer and create FFT Data for Spectrogram from it.
                                 * @param   {AudioBuffer}     audioBuffer   AudioBuffer to process into FFT data.
                                 * @returns {WaveFormData}                  Processed data
                                 */
                                const processWaveForm = async (audioBuffer) => {
                                    // Create a new OfflineAudioContext with information from the pre-created audioBuffer
                                    // The OfflineAudioContext can be used to process a audio file as fast as possible.
                                    // Normal AudioContext would process the file at the speed of playback.
                                    const offlineCtx = new OfflineAudioContext(audioBuffer.numberOfChannels, audioBuffer.length, audioBuffer.sampleRate)
                                    // Create a new source, in this case we have a AudioBuffer to create it for, so we create a buffer source
                                    const source = offlineCtx.createBufferSource()
                                    // Set the buffer to the audio buffer we are using
                                    source.buffer = audioBuffer
                                    // Set source channel count to the audio buffer channel count, if this wasn't set, the source would default to 2 channels.
                                    source.channelCount = audioBuffer.numberOfChannels
                                
                                    // We want to create spectrogram for each channel in the buffer, so we need to separate the channels to separate outputs.
                                    const splitter = offlineCtx.createChannelSplitter(source.channelCount)
                                    // Create a analyzer node for the full context
                                    const generalAnalyzer = offlineCtx.createAnalyser()
                                    generalAnalyzer.fftSize = config.fftResolution
                                    generalAnalyzer.smoothingTimeConstant = config.smoothingTimeConstant
                                
                                    // Prepare buffers and analyzers for each channel
                                    const channelFFtDataBuffers = []
                                    const analyzers = []
                                    for (let i = 0; i < source.channelCount; i += 1) {
                                        channelFFtDataBuffers[i] = new Uint8Array((audioBuffer.length / config.processorBufferSize) * (config.fftResolution / 2))
                                        // Setup analyzer for this channel
                                        analyzers[i] = offlineCtx.createAnalyser()
                                        analyzers[i].smoothingTimeConstant = config.smoothingTimeConstant
                                        analyzers[i].fftSize = config.fftResolution
                                        // Connect the created analyzer to a single channel from the splitter
                                        splitter.connect(analyzers[i], i)
                                    }
                                    // Script processor is used to process all of the audio data in fftSize sized blocks
                                    // Script processor is a deprecated API but the replacement APIs have really poor browser support
                                    offlineCtx.createScriptProcessor = offlineCtx.createScriptProcessor || offlineCtx.createJavaScriptNode
                                    const processor = offlineCtx.createScriptProcessor(config.processorBufferSize, 1, 1)
                                    let offset = 0
                                    processor.onaudioprocess = (ev) => {
                                        // Run FFT for each channel
                                        for (let i = 0; i < source.channelCount; i += 1) {
                                            const freqData = new Uint8Array(channelFFtDataBuffers[i].buffer, offset, analyzers[i].frequencyBinCount)
                                            analyzers[i].getByteFrequencyData(freqData)
                                        }
                                        offset += generalAnalyzer.frequencyBinCount
                                    }
                                    // Connect source buffer to correct nodes,
                                    // source feeds to:
                                    // splitter, to separate the channels
                                    // processor, to do the actual processing
                                    // generalAanalyzer, to get collective information
                                    source.connect(splitter)
                                    source.connect(processor)
                                    processor.connect(offlineCtx.destination)
                                    source.connect(generalAnalyzer)
                                    // Start the source, other wise start rendering would not process the source
                                    source.start(0)
                                
                                    // Process the audio buffer
                                    await offlineCtx.startRendering()
                                    return {
                                        channels: channelFFtDataBuffers,
                                        stride: config.fftResolution / 2,
                                        tickCount: Math.ceil(audioBuffer.length / config.processorBufferSize),
                                        maxFreq: offlineCtx.sampleRate / 2, // max freq is always half the sample rate
                                        duration: audioBuffer.duration
                                    }
                                }
                                
                                /**
                                 * Create data matrix for heatmap from one dimensional array
                                 * @param {Uint8Array}  data        FFT Data
                                 * @param {number}      strideSize  Single data block width
                                 * @param {number}      tickCount    Data row count
                                 */
                                const remapDataToTwoDimensionalMatrix = (data, strideSize, tickCount) => {
                                    /**
                                     * @type {Array<number>}
                                     */
                                    const arr = Array.from(data)
                                
                                    // Map the one dimensional data to two dimensional data where data goes from right to left
                                    // [1, 2, 3, 4, 5, 6]
                                    // -> strideSize = 2
                                    // -> rowCount = 3
                                    // maps to
                                    // [1, 4]
                                    // [2, 5]
                                    // [3, 6]
                                    const output = Array.from(Array(strideSize)).map(() => Array.from(Array(tickCount)))
                                    for (let row = 0; row < strideSize; row += 1) {
                                        for (let col = 0; col <= tickCount; col += 1) {
                                            output[row][col] = arr[col * strideSize + row]
                                        }
                                    }
                                
                                    return output
                                }
                                
                                /**
                                 * Create a chart for a channel
                                 * @param {lcjs.Dashboard}  dashboard       Dashboard to create the chart in
                                 * @param {number}          channelIndex    Current channel index
                                 * @param {number}          rows            Data row count
                                 * @param {number}          columns         Data column count
                                 * @param {number}          maxFreq         Maximum frequency for data
                                 * @param {number}          duration        Duration in seconds
                                 */
                                const createChannel = (dashboard, channelIndex, rows, columns, maxFreq, duration) => {
                                    // Create a new chart in a specified row
                                    const chart = dashboard.createChartXY({
                                        columnIndex: 0,
                                        columnSpan: 1,
                                        rowIndex: channelIndex,
                                        rowSpan: 1
                                    })
                                        // Hide the chart title
                                        .setTitleFillStyle(emptyFill)
                                
                                    // Start position of the heatmap
                                    const start = {
                                        x: 0,
                                        y: 0
                                    }
                                    // End position of the heatmap
                                    const end = {
                                        x: duration,
                                        // Use half of the fft data range
                                        y: (Math.ceil(maxFreq / 2))
                                    }
                                    // Create the series
                                    const series = chart.addHeatmapSeries({
                                        // Data columns, defines horizontal resolution
                                        columns: columns,
                                        // Data rows, defines vertical resolution
                                        // Use half of the fft data range
                                        rows: Math.ceil(rows / 2),
                                        // Start position, defines where one of the corners for hetmap is
                                        start,
                                        // End position, defines the opposite corner of the start corner
                                        end,
                                        // Smoothly render the heatmap data
                                        pixelate: true,
                                        container: 'target',
                                        // Using IntensityGrid, it supports rectangular heatmaps and is simpler than the IntensityMesh type
                                        type: IntensitySeriesTypes.Grid
                                    })
                                        // Use palletted fill style, intensity values define the color for each data point based on the LUT
                                        .setFillStyle(new PalettedFill({
                                            lut: new LUT({
                                                steps: [
                                                    { value: 0, color: ColorHSV(0, 1, 0) },
                                                    { value: 255 * (1 / 6), color: ColorHSV(270, 0.84, 0.2) },
                                                    { value: 255 * (2 / 6), color: ColorHSV(289, 0.86, 0.35) },
                                                    { value: 255 * (3 / 6), color: ColorHSV(324, 0.97, 0.56) },
                                                    { value: 255 * (4 / 6), color: ColorHSV(1, 1, 1) },
                                                    { value: 255 * (5 / 6), color: ColorHSV(44, 0.64, 1) }
                                                ],
                                                interpolate: true
                                            })
                                        }))
                                
                                    // Set default X axis settings
                                    series.axisX.setInterval(start.x, end.x)
                                        .setTickStrategy(AxisTickStrategies.Empty)
                                        .setTitleMargin(0)
                                        .setScrollStrategy(undefined)
                                        .setMouseInteractions(false)
                                    // Set default chart settings
                                    chart.setPadding({ left: 0, top: 8, right: 8, bottom: 1 })
                                        .setMouseInteractions(false)
                                    // Set default X axis settings
                                    series.axisY.setInterval(start.y, end.y)
                                        .setTitle(`Channel {channelIndex + 1} (Hz)`)
                                        .setScrollStrategy(AxisScrollStrategies.fitting)
                                
                                    return {
                                        chart,
                                        series
                                    }
                                }
                                
                                /**
                                 * Render a spectrogram for given data set
                                 * @param {WaveFormData} data Data set to render
                                 */
                                const renderSpectrogram = async (data) => {
                                    // Create a dashboard with enough rows for the number of channels in data set
                                    const dashboard = lc.Dashboard({
                                        // theme: Themes.dark 
                                        numberOfColumns: 1,
                                        container: 'target',
                                        numberOfRows: data.channels.length
                                    })
                                        // Hide the dashboard splitter
                                        .setSplitterStyle(emptyLine)
                                
                                    // Collection of created charts
                                    const charts = []
                                
                                    // Create channels and set data for each channel
                                    for (let i = 0; i < data.channels.length; i += 1) {
                                        // Create a chart for the channel
                                        const ch = createChannel(dashboard, i, data.stride, data.tickCount, data.maxFreq, data.duration)
                                        // Setup the data for the chart
                                        const remappedData = remapDataToTwoDimensionalMatrix(data.channels[i], data.stride, data.tickCount)
                                        // Set the heatmap data
                                        ch.series.invalidateValuesOnly(remappedData)
                                        // Add the created chart and series to collection
                                        charts.push(ch)
                                    }
                                
                                    // Style to bottom most chart axis to use it as the common axis for each chart
                                    charts[charts.length - 1]
                                        .series
                                        .axisX
                                        .setTickStrategy(AxisTickStrategies.Numeric)
                                        .setScrollStrategy(AxisScrollStrategies.fitting)
                                        .setTitle(`Duration (s)`)
                                        .setMouseInteractions(true)
                                
                                    // Link chart X axis scales
                                    charts[charts.length - 1].series.axisX.onScaleChange((start, end) => {
                                        charts.forEach((c, i) => i < charts.length - 1 ? c.series.axisX.setInterval(start, end, false, false) : undefined)
                                    })
                                
                                    return dashboard
                                }
                                
                                (async () => {
                                    // Remove loading spinner
                                    document.querySelectorAll('.loading').forEach(item => {
                                        item.parentElement.removeChild(item)
                                    })
                                    const run = async () => {
                                        // Load waveform from url
                                        const waveform = await loadWaveForm('".plugins_url('../images/icons/Truck_driving_by-Jason_Baker-2112866529_edit.wav',__FILE__)."')
                                        // Process the loaded wave form to prepare it for being added to the chart
                                        const processed = await processWaveForm(waveform)
                                        // Create a dashboard from the processed waveform data
                                        const dashboard = renderSpectrogram(processed)
                                    }
                                    // Check if audio context was started
                                    if (audioCtx.state === 'suspended') {
                                        // Show a large play button
                                        const resumeElement = document.createElement('div')
                                        resumeElement.style.position = 'absolute'
                                        resumeElement.style.top = '0'
                                        resumeElement.style.left = '0'
                                        resumeElement.style.right = '0'
                                        resumeElement.style.bottom = '0'
                                
                                        const resumeImg = document.createElement('img')
                                        resumeImg.src =  '".plugins_url('../images/icons/play_circle_outline-24px.svg',__FILE__)."'
                                        resumeImg.style.width = '100%'
                                        resumeImg.style.height = '100%'
                                
                                        resumeElement.onclick = () => {
                                            audioCtx.resume()
                                        }
                                        resumeElement.appendChild(resumeImg)
                                
                                        const innerElement = document.querySelector('.inner')
                                        let target
                                        if (!innerElement) {
                                            target = document.createElement('div')
                                            target.classList.add('inner')
                                            document.body.appendChild(target)
                                        }
                                        const targetElement = innerElement || target
                                        targetElement.appendChild(resumeElement)
                                
                                        // Attach a listener to the audio context to remove the play button as soon as the context is running
                                        audioCtx.onstatechange = () => {
                                            if (audioCtx.state === 'running') {
                                                run()
                                                audioCtx.onstatechange = void 0
                                                targetElement.removeChild(resumeElement)
                                            }
                                        }
                                    } else {
                                        // Audio context is running so run the example
                                        run()
                                    }
                                })()
                                
                                "
                                                    ),
                        'Example_3' => array(
                            'chart_name' => 'Scrolling Heatmap',
                            'icon' => plugins_url('../images/icons/scrollingHeatmap.png',__FILE__).'',
                            'html_code' => '<div id="target" class="row content"></div>',
                            'javascript_code' => "const {
                                lightningChart,
                                PalettedFill,
                                LUT,
                                ColorHEX,
                                UIElementBuilders,
                                UIOrigins,
                                UIDraggingModes,
                                Themes
                            } = lcjs
                            
                            const {
                                createProgressiveFunctionGenerator
                            } = xydata
                            
                            /**
                             * Create data matrix for heatmap from one dimensional array
                             * @param {Uint8Array}  data        FFT Data
                             * @param {number}      strideSize  Single data block width
                             * @param {number}      tickCount    Data row count
                             */
                            const remapDataToTwoDimensionalMatrix = (data, strideSize, tickCount) => {
                                /**
                                 * @type {Array<number>}
                                 */
                                const arr = Array.from(data)
                            
                                // Map the one dimensional data to two dimensional data where data goes from right to left
                                // [1, 2, 3, 4, 5, 6]
                                // -> strideSize = 2
                                // -> rowCount = 3
                                // maps to
                                // [1, 4]
                                // [2, 5]
                                // [3, 6]
                                const output = Array.from(Array(strideSize)).map(() => Array.from(Array(tickCount)))
                                for (let row = 0; row < strideSize; row += 1) {
                                    for (let col = 0; col <= tickCount; col += 1) {
                                        output[row][col] = arr[col * strideSize + row]
                                    }
                                }
                            
                                return output
                            }
                            
                            // Dimensions for the Heatmap. Also used to generate correct size array.
                            const resolution = 100
                            const historyLen = 500
                            
                            // Create colorpalette for the LUT. The colors should interpolate between values.
                            const lut = new LUT({
                                steps: [
                                    { value: 0, color: ColorHEX('#1000') },
                                    { value: 40, color: ColorHEX('#1000') },
                                    { value: 50, color: ColorHEX('#f00') }
                                ],
                                interpolate: true
                            })
                            
                            const paletteFill = new PalettedFill({ lut })
                            
                            // Create intensity grid
                            const chartXY = lightningChart(license_key).ChartXY({
                                // theme: Themes.dark
                                container: 'target',
                            })
                            const intensityOptions = {
                                rows: resolution,
                                columns: historyLen,
                                start: { x: 0, y: 0 },
                                end: { x: 100, y: 50 },
                                pixelate: false
                            }
                            const grid = chartXY.addHeatmapSeries(intensityOptions)
                                .setFillStyle(paletteFill)
                            
                            // Index for sweeping mode.
                            let ind = 0
                            
                            // Add a button to the top left of the chart to toggle between
                            // sweeping update and scrolling update for the intensity grid.
                            const toggleButton = chartXY.addUIElement(UIElementBuilders.CheckBox)
                                .setText('Toggle sweeping on / off')
                                .setOn(false)
                                .setPosition({ x: 5, y: 99 })
                                .setOrigin(UIOrigins.LeftTop)
                                .setDraggingMode(UIDraggingModes.notDraggable)
                            
                            toggleButton
                                .onSwitch(() => {
                                    ind = 0
                                    grid.reset(intensityOptions)
                                })
                            
                            // Update the heatmap by sweeping the columns
                            const sweepColumns = (arr, ind) => {
                                const remappedData = remapDataToTwoDimensionalMatrix(arr, resolution, 1)
                                grid.invalidateValuesOnly(remappedData, { column: { start: ind, end: ind + 1 }, row: { start: 0, end: resolution - 1 } })
                            }
                            
                            createProgressiveFunctionGenerator()
                                .setSamplingFunction((x) => ((Math.sin(x)) * resolution) / 2)
                                .setStep(0.01)
                                .setStart(0)
                                .setEnd(Math.PI * 2)
                                .generate()
                                .setStreamRepeat(true)
                                .setStreamInterval(1000 / 60)
                                .setStreamBatchSize(1)
                                .toStream()
                                .forEach((data) => {
                                    let values = []
                                    const y = data.y
                                    for (let i = 0; i < resolution; i++) {
                                        values[i] = Math.min(i - y, resolution - (i - y))
                                    }
                                    // State for the sweeping toggle.
                                    if (!toggleButton.getOn()) {
                                        grid.addColumn(1, 'value', [values])
                                    } else {
                                        // Sweeping mode. Add data to heatmap by invalidating values
                                        // with given data.
                                        sweepColumns(values, ind)
                                        ind += 1
                                        if (ind >= historyLen - 1)
                                            ind = 0
                                    }
                                })"
                            ),
                        ),            
                '3D_Charts' => array(
                'Example_1' => array(
                    'chart_name' => '3D Scatter Chart',
                    'chart_method' => 'Chart3D',
                    'icon' => plugins_url('../images/icons/3dScatter.png',__FILE__),
                    'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
                    'javascript_code' =>'[["Data","series1","","","","",""],["X","55","60","65","50","70","65"],["Y","60","62","65","60","62","75"],["Z","40","40","50","40","70","80"]]'
                                ),
                    'Example_2' => array(
                        'chart_name' => '3D Line Series',
                        'chart_method' => 'Chart3D',
                        'icon' => plugins_url('../images/icons/3dLine.png',__FILE__),
                        'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
                        'javascript_code' =>'[["Data","series",""],["X","0","0"],["Y","0","0"],["Z","-51","51"]]'
                            ),      
                    'Example_3' => array(
                        'chart_name' => '3D 50k Points',
                        'chart_method' => 'Chart3D',
                        'icon' => plugins_url('../images/icons/3d50kPoints.png',__FILE__),
                        'html_code' => '<div id="target_$CHARTID" class="row content"></div>',
                        'javascript_code' =>'[["Data","series","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],
                        ["X","45","50","75","10","40","42","20","25","30","35","40","42","43","33","45","48","46","47","48","49","50","20","22","24","26","29","41","42","43","44","45","10","11","15","17","18","39","37","32","45","49","77","75","76","72","73","72","89","88","87","85","90","91","92","93","94","34","53","69","21","49","41","90","65","35","73","10","21","51","58","74","35","42","22","67","88","35","66","72","95","85","20","28","70","72","49"],
                        ["Y","60","62","65","60","62","65","50","55","60","65","70","20","21","25","54","32","33","35","36","37","38","20","23","38","15","20","66","67","68","69","70","19","20","21","22","23","45","43","35","65","65","71","72","73","74","75","81","82","83","84","88","76","77","78","79","72","34","71","31","89","57","41","69","33","89","55","20","68","52","64","70","53","67","20","80","45","49","58","44","76","81","35","15","69","83","40"],
                        ["Z","22","39","48","50","62","70","25","30","19","40","45","32","65","42","85","60","20","30","35","40","38","31","41","47","63","80","77","78","79","36","29","23","19","17","22","27","40","30","38","32","57","60","59","58","55","53","56","57","58","59","54","61","62","63","64","65","20","54","25","78","90","55","81","29","45","25","30","20","61","69","80","40","75","45","35","65","35","25","48","61","73","83","46","79","84","100"]]'),
                    )
                                        
    );
    $chart_types = array_merge(
        $additional,
            
        array(
            /*
          'dashboard' => array(
            'name'    => esc_html__( 'Dashboard', 'visualizer' ),
            'enabled' => true,
            'icon' => plugins_url('../images/icons/path 265.svg',__FILE__) ,
            'description' => plugins_url('../images/icons/Union 4.svg',__FILE__),
          ),*/
          'bar_chart'         => array(
            'name'    => esc_html__( 'Bar Chart', 'visualizer' ),
            'enabled' => true,
            'icon' => plugins_url('../images/icons/Group 5.svg',__FILE__),
            'description' =>  plugins_url('../images/icons/Union 4.svg',__FILE__),
          ),
          'radial_charts'      => array(
            'name'    => esc_html__( 'Radial Charts', 'visualizer' ),
            'enabled' => true,
            'icon' => plugins_url('../images/icons/path 279.svg',__FILE__),
            'description' =>  plugins_url('../images/icons/Union 4.svg',__FILE__),
          ),
          'line_series'        => array(
            'name'    => esc_html__( 'Line Series', 'visualizer' ),
            'enabled' => true,
            'icon' => plugins_url('../images/icons/path 271.svg',__FILE__),
            'description' =>  plugins_url('../images/icons/Union 4.svg',__FILE__),
          ),
          'trading' => array(
            'name'    => esc_html__( 'Trading', 'visualizer' ),
            'enabled' => true,
            'icon' => plugins_url('../images/icons/Group 2.svg',__FILE__),
            'description' =>  plugins_url('../images/icons/Union 4.svg',__FILE__),
          ), 
          
          'statistics'         => array(
            'name'    => esc_html__( 'Statistics', 'visualizer' ),
            'enabled' => true,
            'icon' => plugins_url('../images/icons/Group 3.svg',__FILE__),
            'description' =>  plugins_url('../images/icons/Union 4.svg',__FILE__),
          ),
          'area_series'        => array(
            'name'    => esc_html__( 'Area Series', 'visualizer' ),
            'enabled' => true,
            'icon' => plugins_url('../images/icons/path 273.svg',__FILE__),
            'description' =>  plugins_url('../images/icons/Union 4.svg',__FILE__),
          ),/*
          'Heatmaps'         => array(
            'name'    => esc_html__( 'Heatmaps', 'visualizer' ),
            'enabled' => true,
            'icon' => plugins_url('../images/icons/Group 4.svg',__FILE__),
            'description' =>  plugins_url('../images/icons/Union 4.svg',__FILE__),
          ),*/
          '3D_Charts'         => array(
            'name'    => esc_html__( '3D Charts', 'visualizer' ),
            'enabled' => true,
            'icon' => plugins_url('../images/icons/path 264.svg',__FILE__),
            'description' =>  plugins_url('../images/icons/Union 4.svg',__FILE__),
          )
        )
      );
  }
  add_action( 'init', 'lcjs_global_vars' );

  function is_JSON(...$args) {
    json_decode(...$args);
    return (json_last_error()===JSON_ERROR_NONE);
}

add_shortcode( 'Lcjs_charts' , 'lcjs_chart_creation' );
function lcjs_chart_creation( $atts ) {
  
  extract( shortcode_atts( array(
    'id' => ''
  ), $atts ) );
 
   if ( !$chart = get_post( $id ) )
    return '';
  // get meta
  $html       =  get_post_meta( $id, 'html_code', true );
  $javascript_data =  get_post_meta( $id, 'javascript_code', true ) ;
  $height1    =  get_post_meta( $id, 'height', true );
  $width1     =  get_post_meta( $id, 'width', true ) ;
  $param_data     =  get_post_meta( $id, 'param_data', true ) ;
  $param_collection = json_decode($param_data,true);

  //lc_charts_enqueue_javascript($javascript);
  $html = str_replace('$CHARTID',$id,$html);
  echo $html;
  $json_data = $javascript_data;

  $js_array = get_array_datagrid($json_data,false);
  
  $json_data = json_encode($js_array);
  
  $paramters = array();
  $paramters['set_id'] = $id;
    $chart_method = $param_collection['chart_method'];
    $set_title  = $param_collection['set_title'];
    $paramters['set_title'] = $set_title;
    //$paramters['set_color'] = $param_collection['set_color'];
    $paramters['setAnimationsEnabled'] = $setAnimationsEnabled;
    $paramters['setMultipleSliceExplosion'] = $setMultipleSliceExplosion;

    
   if($chart_method=='Dashboard')
    {
        if($param_collection['chart_type_case']=='Dashboard Multi-Direction')
        {
        $numberOfRows = 3;
        $numberOfColumns = 3;
        }else
        {
            $numberOfRows = count($js_array);
            $numberOfColumns = 1; 
        }
    }
  
   if($chart_method=='Chart3D')
   {
        /*Series generate function start  */
        $seriescount =$param_collection['num_of_series'];
        $numberofpointsinseries = $param_collection['num_of_points'];
        //$series_data = generate_series($seriescount, $numberofpointsinseries);
        //$json_data = json_encode($series_data);
        /*Series generate function end  */
   }
    $paramters['numberOfRows'] = $numberOfRows;
    $paramters['numberOfColumns'] = $numberOfColumns;

    $paramters['sub_type'] =$param_collection['chart_type_case'] ;
    $param_collection = json_encode($paramters);
   
   
    $callscript =  "Render_script_".$chart_method."($json_data,$param_collection);";
       
    lc_charts_insert_js($callscript);
    
  echo '<style>
  #target_'.$id.'{
    width:  ' . $width1 . 'px;
    height: ' . $height1 . 'px;
  }
  #chart-1
  {
    width:  ' . $width1 . 'px;
    height: ' . $height1 . 'px;
  }
  </style>';

}
add_action( 'wp_ajax_delete_list', 'lcjs_do_delete_list' );

function sanitize_text_or_array_field($array_or_string) {
    if( is_string($array_or_string) ){
        $array_or_string = sanitize_text_field($array_or_string);
    }elseif( is_array($array_or_string) ){
        foreach ( $array_or_string as $key => &$value ) {
            if ( is_array( $value ) ) {
                $value = sanitize_text_or_array_field($value);
            }
            else {
                $value = sanitize_text_field( $value );
            }
        }
    }
  
    return $array_or_string;
  }

function get_array_datagrid($data_grid,$headers)
{
    if(is_array($data_grid)&& count($data_grid)>0)
    {
        if($data_grid[1][0]=='X' && $data_grid[2][0]=='Y' && $data_grid[3][0]=='Z' )
        {
          $count = count($data_grid[0]);
           for($i=1;$i<$count;$i++)
           {
              
              $input_data['series'][$i][$data_grid[1][0]] =  $data_grid[1][$i] ;
              $input_data['series'][$i][$data_grid[2][0]] =  $data_grid[2][$i] ;
              $input_data['series'][$i][$data_grid[3][0]] =  $data_grid[3][$i] ;
           }
         foreach($input_data as $key=>$value)
         {
             $value = array_values($value);
             $input_data[$key] = $value;
         }
          
        }else
        {
        if(count($data_grid[0])>2 && count($data_grid)>=2)
        {
            if($data_grid[1][0]=='X' && $data_grid[2][0]=='Y')
            {
                  $count = count($data_grid[0]);
                    for($i=1;$i<$count;$i++)
                    {
                        $index = $data_grid[0][$i];
                        if($index)
                        {
                            $key = $index;
                        }
                        $input_data[$key][$i][$data_grid[1][0]] =  $data_grid[1][$i] ;
                        $input_data[$key][$i][$data_grid[2][0]] =  $data_grid[2][$i] ;
                    }
                    foreach($input_data as $key=>$value)
                    {
                        $value = array_values($value);
                        $input_data[$key] = $value;
                    }
            }else{
                if($data_grid[0][0]=='X-position' && $data_grid[4][0]=='Closing')
                {
                    $num_cols = count($data_grid[0]);
                    $num_rows = count($data_grid);
                   
                    for($i=1;$i < $num_cols;$i++)
                    {
                        $data_array = array();
                        for($k=0;$k < $num_rows;$k++)
                        {
                            $data_array[] = $data_grid[$k][$i];
                        }
                        $input_data[$i] = $data_array;  
                    }
                }if($data_grid[0][0]=='X' && $data_grid[1][0]=='Y'){
                    $count = count($data_grid[0]);
                    
                    for($i=1;$i<$count;$i++)
                    {
                        
                        $input_data[$i][$data_grid[0][0]] =  $data_grid[0][$i] ;
                        $input_data[$i][$data_grid[1][0]] =  $data_grid[1][$i] ;
                    }
                    
                    $input_data = array_values($input_data);
                }else{
                   
                    if($headers)
                    {
                        for($i=0;$i<count($data_grid);$i++)
                        {
                            $input_data[] = $data_grid[$i]; 
                        }
                    }else
                    {
                        for($i=1;$i<count($data_grid);$i++)
                        {
                        $j=0;
                        for($k=1;$k<count($data_grid[0]);$k++)
                        {
                            $input_data[$data_grid[$i][0]][$j]['Name'] = $data_grid[0][$k] ;
                            $input_data[$data_grid[$i][0]][$j]['Value'] = $data_grid[$i][$k] ;
                            $j++;
                        }
                        }
                    }
                }

            }
               if($input_data['Value'])
               {
                $input_data = $input_data['Value'];
               }      
        }else
        {
                for($i=0;$i<count($data_grid);$i++)
                {
                    if($headers)
                    {
                        $input_data[0][$data_grid[0][0]] =$data_grid[0][0] ;
                        $input_data[0][$data_grid[0][1]] =$data_grid[0][1] ;
                    }
                    $cat_data = $data_grid[$i];
                    
                    if(count($cat_data)> 0)
                    {
                        for($j=1;$j<count($cat_data);$j++)
                        {
                            $input_data[$j][$data_grid[$i][0]] =$cat_data[$j] ;
                        }
                    }
                    
                }
                $input_data = array_values($input_data);
         }
        }
    }
    return $input_data;
}

function lcjs_do_delete_list() {
	global $wpdb; // this is how you get access to the database
  if(!empty($_POST['delete_id'])){
  $delete_id =  sanitize_text_field($_POST['delete_id']) ;
  if($delete_id)
  {
    $res = array();
     $result = wp_delete_post($delete_id);
     if($result)
     {
      $res['delete'] = '1';
     }else
     {
      $res['delete'] = '0';
     }
  }
  echo  json_encode($res);
}
	wp_die(); // this is required to terminate immediately and return a proper response
}
add_action( 'wp_ajax_export_sample_example', 'lcjs_do_export_sample_example' );
function lcjs_do_export_sample_example()
{
    global $post,$wpdb,$wp_query,$abc;
    if(isset($_POST['my_javascript_data'])){
        $javascript_data = $_POST['my_javascript_data'];
     }
    
     $num_row = count($javascript_data[0]);
     $num_col = count($javascript_data);
     $result =array();
     for($i=0;$i<$num_row;$i++)
     {
         for($j=0;$j<$num_col;$j++)
         {
            $result[$i][$j]=$javascript_data[$j][$i];
         }
     }
    
     $filename = 'test.csv';
     array_to_csv_download($result, // this array is going to be the second row
        "test.csv"
      );
   wp_die();
}
function array_to_csv_download($array, $filename = "export.csv", $delimiter=",") {
    header('Content-Type: application/csv');
    header('Content-Disposition: attachment; filename="'.$filename.'";');

    // open the "output" stream
    // see http://www.php.net/manual/en/wrappers.php.php#refsect2-wrappers.php-unknown-unknown-unknown-descriptioq
    $f = fopen('php://output', 'w');

    foreach ($array as $line) {
        fputcsv($f, $line, $delimiter);
    }
    fseek($f, 0);
    // tell the browser it's going to be a csv file
    header('Content-Type: application/csv');
    // tell the browser we want to save it instead of displaying it
    header('Content-Disposition: attachment; filename="'.$filename.'";');
    // make php send the generated csv lines to the browser
    fpassthru($f);
  
}  

add_action( 'wp_ajax_get_my_preview', 'lcjs_do_get_my_preview' );

function lcjs_do_get_my_preview() {
    global $wpdb; // this is how you get access to the database
    global $wp_query;
    if(isset($_POST['html'])){
        $html = wp_kses_post($_POST['html']);
     }  
    if(isset($_POST['my_javascript_data'])){
      //$javascript_data = $_POST['my_javascript_data'];
      $tags = isset( $_POST['my_javascript_data'] ) ? (array) $_POST['my_javascript_data'] : array();
      $javascript_data = sanitize_text_or_array_field($tags);
    } 
    $set_title = sanitize_text_field($_POST['set_title']);
    $sel_chart_type = sanitize_text_field($_POST['sel_chart_type']);
    $id = 1;
    $html = str_replace('$CHARTID',$id,$html);
    $js_array = get_array_datagrid($javascript_data,false);
    //echo '<pre>';
    //print_r($js_array);
    $json_data = json_encode($js_array);
    $set_title =  sanitize_text_field($_POST['set_title']);
    $sel_chart_type =  sanitize_text_field($_POST['sel_chart_type']);
    $ddata_chart = $GLOBALS['abc'];
    list($chart_type_name,$example_title) = explode('#',$sel_chart_type);
    $chart_method = $ddata_chart[$chart_type_name][$example_title]['chart_method'];
    $param_array = array();
    $param_array['set_id'] =  $id;
    $param_array['set_title'] = $set_title;
    $param_array['chart_type'] =$sel_chart_type;
    $param_array['chart_method'] =$chart_method;
    $param_array['sub_type'] =$ddata_chart[$chart_type_name][$example_title]['chart_name'];
    if($param_array['sub_type']=='Dashboard Multi-Direction')
      {  
        $numberOfRows = 3;
        $numberOfColumns = 3;
      }else{
        $numberOfRows = count($js_array);$numberOfColumns = 1;
      }
        $param_array['numberOfRows'] = $numberOfRows;
        $param_array['numberOfColumns'] = $numberOfColumns;
        $param_collection = json_encode($param_array);
        $callscript =  "Render_script_".$chart_method."($json_data,$param_collection);";
        $width1 = 550; 
        $height1 = 700;
        include('preview.php');
        wp_die();
}

add_action( 'wp_ajax_edit_get_data', 'lcjs_do_edit_get_data' );

function lcjs_do_edit_get_data() {
	global $wpdb; // this is how you get access to the database
  global $wp_query;
  if(!empty($_POST['edit_id'])){
   $edit_id =  sanitize_text_field($_POST['edit_id']) ;
   $postid = $edit_id ;
   $post_title =  get_the_title( $postid );
   $html_code =  get_post_meta($postid, 'html_code', true);
   $javascript_code =  get_post_meta($postid, 'javascript_code', true);
   
   $resources =  get_post_meta($postid, 'resources', true);
   $height =  get_post_meta($postid, 'height', true);
   $width =  get_post_meta($postid, 'width', true);

   $param_data     =  get_post_meta( $postid, 'param_data', true ) ;
   $param_collection = json_decode($param_data,true);
   
   //print_r(json_encode($javascript_code,JSON_UNESCAPED_SLASHES));
   $result = array();
   $result['post_title'] = $post_title;
   $result['html_code'] = $html_code;
   $result['javascript_code'] = json_encode($javascript_code,JSON_UNESCAPED_SLASHES);
   $result['resources'] = $resources;
   $result['height'] = $height;
   $result['width'] = $width;
   $result['set_title'] = $param_collection['set_title'];
   $result['sel_chart_type'] = $param_collection['chart_type'];
   //$result['set_color'] = $param_collection['set_color'];
   echo json_encode($result,JSON_UNESCAPED_SLASHES);
   wp_reset_query();
  }
    wp_die(); // this is required to terminate immediately and return a proper response
}



add_action( 'wp_ajax_get_example', 'lcjs_get_example' );
 

function lcjs_get_example() {
  global $wpdb; 
  $ddata_chart = $GLOBALS['abc'];
  $example_name =  sanitize_text_field($_POST['Example_name']) ;
  list($chart_type_name,$example_title) = explode('#',$example_name);

  if($chart_type_name != '' && $example_title != '' )
  {
      $result = array();
      if(count($ddata_chart)>0)
      {
        $example_data = $ddata_chart[$chart_type_name][$example_title];
        if(count($example_data) > 0)
        {
           $html_code = $example_data['html_code'];
           $javascript_code = $example_data['javascript_code'];
           $result['example_title'] = $example_data['chart_name'];
           $result['html_code'] = $html_code ;
           $javascript_code = stripslashes($javascript_code);
          
           //$javascript_code = get_array_datagrid($javascript_code,true);
           $result['javascript_code'] = $javascript_code ;
        }
      }
   echo json_encode($result,JSON_UNESCAPED_SLASHES);
  }

  wp_die(); 
}

function lcjs_app_output_buffer() {
  ob_start();
} // soi_output_buffer
add_action('init', 'lcjs_app_output_buffer');

function lcjs_remove_footer_admin() {



if (is_admin() && isset($_GET['page']) && 'LC-JS/includes/mfp-chart-listing-page.php' == $_GET['page']
 || 'LC-JS/includes/License.php' == $_GET['page'] || 'LC-JS/includes/get_help.php' == $_GET['page']) {

        echo '
        <div class="row plugin-footer">
            <div class="col-md-10"></div>
            <div class="col-md-2 logo-footer"> 
            <a href="https://www.arction.com/" target="_blank"> 
                <img src="'.plugins_url('/images/Footer_1.png',__FILE__).'"> </div>
            </a>
            </div>
        </div>
        <!--<p>
        This file is part of LCJS WordPress Plugin.
        LCJS WordPress Plugin is free software: you can redistribute it and/or modify
        it under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
        LCJS WordPress Plugin is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU General Public License for more details.
        You should have received a copy of the GNU General Public License
        along with LCJS WordPress Plugin.  If not, see <https://www.gnu.org/licenses/>.
        </p>-->';
    }
   
  }
  add_filter('admin_footer_text', 'lcjs_remove_footer_admin');



  function lcjs_selectively_admin_script( $hook ){

    if (is_admin() && isset($_GET['page']) && 'LC-JS/includes/mfp-chart-listing-page.php' == $_GET['page']
    || 'LC-JS/includes/License.php' == $_GET['page'] || 'LC-JS/includes/get_help.php' == $_GET['page']) {
        
    wp_enqueue_script( 'bootsrap-js-2', plugin_dir_url( __FILE__ ).'js/' . 'bootstrap.js', array(), '4.3.1' );
    wp_enqueue_script( 'bootsrap-js', plugin_dir_url( __FILE__ ).'js/' . 'bootstrap.min.js', array(), '4.3.1' );
    wp_enqueue_script( 'bootsrap-js-1', plugin_dir_url( __FILE__ ).'js/' . 'master-script.js', array(), '4.3.1' );
    wp_enqueue_script( 'tabular-input', plugin_dir_url( __FILE__ ).'js/' . 'tabular-input.js', array(), '');
    wp_register_style( 'LC-JS', plugins_url('/css/bootstrap.min.css' ,__FILE__ ) );
    wp_enqueue_style( 'LC-JS' );
    wp_register_style( 'LC-JS-1', plugins_url( '/css/style.css',__FILE__ ) );
    wp_enqueue_style( 'LC-JS-1' );
    wp_register_style( 'tabular-input', plugins_url( '/css/tabular-input.css',__FILE__ ) );
    wp_enqueue_style( 'tabular-input' );
    }
}
add_action( 'admin_enqueue_scripts', 'lcjs_selectively_admin_script' );
